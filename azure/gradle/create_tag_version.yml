#####
# Creates a new tag version (for release)
# * Calculates the version number from a user-specified "release.version" variable
# * Generates a changelog with Github issues and PRs
# * Bumps the version number and creates tag
# * Bumps the version number to the next SNAPSHOT version
#####

parameters:
  vmImage: 'ubuntu-18.04'
  jdkVersion: '1.11'

jobs:
- job: TagVersionForNewRelease
  pool:
    vmImage: ${{ parameters.vmImage }}
  dependsOn: Build
  # when manually run with overridden release.version
  condition: and(succeeded(), ne(variables['release.version'], ''), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  steps:
  - checkout: self
    persistCredentials: true
  # Resolve bugfix|minor|major|<version> to actual version
  - bash: |
      version=$(grep "version=" gradle.properties | cut -d'=' -f2)
      if [[ "$(release.version)" == "bugfix" ]]; then
          version=${version%-*}
      elif [[ "$(release.version)" == "minor" ]]; then
          version=${version%%.*}.$((`echo ${version} | cut -d'.' -f 2`+1)).0
      elif [[ "$(release.version)" == "major" ]]; then
          version=$((${version%%.*}+1)).0.0
      elif [[ "$(release.version)" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          version=$(release.version)
      else
          echo "Got unsupported version $(release.version), use bugfix|minor|major|<version>" >&2
          exit 1
      fi
      echo "##vso[task.setvariable variable=version]${version}"
  - task: Gradle@2
    displayName: Generate changelog for $(version)
    inputs: 
      gradleWrapperFile: 'gradlew'
      javaHomeOption: 'JDKVersion'
      jdkVersionOption: ${{ parameters.jdkVersion }}
      jdkArchitectureOption: 'x64'
      publishJUnitResults: false
      tasks: 'generateChangelog'
      options: '-Pchangelog.releaseVersion=$(version) --stacktrace --info'
  - script: |
      # set bot as author
      git config user.email "31185348+bakdata-bot@users.noreply.github.com"
      git config user.name "bakdata-bot"
      # check if we are really on HEAD of master
      git fetch 
      if [[ `git rev-list HEAD...origin/master --count` > 0 ]]; then exit 1; fi
      git checkout master
      # add commit and push to master
      git add CHANGELOG.md
      git commit -m "Changelog for version $(version)"
      git push
  # Sets the release version; creates tag; and sets new SNAPSHOT version (total: 2 commits + 1 tag)
  # Tag triggers actual deployment
  - task: Gradle@2
    displayName: Release new version
    inputs: 
      gradleWrapperFile: 'gradlew'
      javaHomeOption: 'JDKVersion'
      jdkVersionOption: '1.11'
      jdkArchitectureOption: 'x64'
      publishJUnitResults: false
      tasks: 'release -x test'
      options: '-Prelease.useAutomaticVersion=true -Prelease.releaseVersion=$(version) --stacktrace --info'
    env:
      CI: true